---
# Delete temporary key if exist.
- name: Delete possibly existing temporary deployment ssh key
  ec2_key:
    name: temporary_deployment_key
    region: "{{ region }}"
    state: absent
  ignore_errors: yes

# Create new temporary key. This key is used for debugging if something goes wrong during the deployment.
- name: Create temporary ssh key for deploying machines
  ec2_key:
    name: temporary_deployment_key
    region: "{{ region }}"
  register: temp_deploy_key
  tags: temporary_ssh_key

# Save the temporary private key.
- name: Save temporary ssh private key to a file
  copy:
    content: "{{ temp_deploy_key.key.private_key }}"
    dest: "{{ playbook_dir }}/keys/temporary_deployment_key"
    mode: 0600
  when: temp_deploy_key.changed
  register: saved_temp_deploy_key
  tags: temporary_ssh_key

# Get all the ec2 instances which are in running state and belongs to the region.
- name: Fetch EC2 details
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: [ "running"]
  register: running_ec2

# Deploy the machine
- name: Deploy EC2 machines to availability zones
  ec2:
    key_name: temporary_deployment_key
    instance_type: "{{ item.value.instance_type }}"
    region: "{{ region }}"
    image: "{{ ami_base_image }}"
    group_id: "{{ server_firewall.group_id }}"
    instance_tags:
      "Name": "{{ item.key }}"
      "type": "{{ item.key }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: "{{ item.value.volume_size|default(8) }}"
        delete_on_termination: true
    wait: yes
    count: "{{ item.value.number_of_instances }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    assign_public_ip: yes
  # Do not deploy if the ec2 with same name exists.
  when: "item.key not in (running_ec2.instances|map(attribute='tags.Name')|list)"
  with_dict:
    - "{{ machines }}"
  register: instances

- name: Get hosts keys of the machines
  shell: "aws ec2 get-console-output --region {{ region }} --instance-id {{ item.1.id }} --output text --profile {{ profile }}|grep ssh-ed25519"
  until: "'ssh-ed25519' in host_keys.stdout"
  retries: 100
  delay: 3
  register: host_keys
  with_subelements:
    - "{{ instances.results }}"
    - instances
  when: "item.0 is changed and item.1 is defined and item.1|length > 0"

- name: Update host keys to known_hosts file [1/2]
  lineinfile:
    dest: "{{ playbook_dir }}/keys/ansible_known_hosts"
    regexp: "^{{ item.item[1].public_dns_name }}"
    line: "{{ item.item[1].public_dns_name }} {{ item.stdout }}"
    state: present
  with_items: "{{ host_keys.results }}"
  when: "item is changed and item.item is defined and item.item|length > 0"
  no_log: True

- name: Update host keys to known_hosts file [2/2]
  lineinfile:
    dest: "{{ playbook_dir }}/keys/ansible_known_hosts"
    regexp: "^{{ item.item[1].public_ip }}"
    line: "{{ item.item[1].public_ip }} {{ item.stdout }}"
    state: present
  with_items: "{{ host_keys.results }}"
  when: "item is changed and item.item is defined and item.item|length > 0"
  no_log: True

- name: Register hostkey for this ansible host
  lineinfile:
    dest: "{{ playbook_dir }}/keys/machine_host_keys"
    line: "{{ item.item.1.tags.type }} {{ item.stdout.split(' ')[1] }}"
    state: present
  with_items: "{{ host_keys.results }}"
  when: "item is changed and item.item is defined and item.item|length > 0"
  no_log: True

- name: Wait for SSH to come up
  local_action: wait_for
    host={{ item.item[1].public_ip }}
    port=22
    state=started
  with_items: "{{ host_keys.results }}"
